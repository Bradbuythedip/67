from decimal import Decimal, getcontext
getcontext().prec = 1000

# Constants
PHI = Decimal('1.6180339887498948482045868343656381177203091798057628621354486227052604628189024497072072041893911374847540880753868917521266338622235369317931800607667263544333890865959395829056383226613199282902678806752087668925017116962070322210432162695486262963136144381497587012203408058879544547492461856953648644492410443207713449470495658467885098743394422125448770664780915884607499887124007652170575179788341662562494075890697040002812104276217711177780531531714101170466659914669798731761356006708748071013179523689427521948435305678300228785699782977834784587822891109762500302696156170025046433824377648610283831268330372429267526311653392473167111211588186385133162038400522216579128667529465490681131715993432359734949850904094762132229810172610705961164562990981629055520852479035240602017279974717534277759277862561943208275051312181562855122248093947123414517022373580577278616008688382952304592647878017889921990270776903895321968198615143780314997411069260886742962267575605231727775203536139362')
BASE = 0x29
SCALING_FACTOR = Decimal('16811670.8537')

def calculate_value(puzzle_number):
    """Calculate value for a given puzzle number"""
    n = puzzle_number - 51
    phi_power = pow(PHI, n)
    
    # Calculate base value
    value = int(SCALING_FACTOR * phi_power * BASE)
    
    # Apply pattern adjustments
    if puzzle_number % 3 == 0:
        value = value ^ BASE
    elif puzzle_number % 3 == 1:
        value = value | BASE
    
    return value

# Known values (puzzle_number, hex_value)
KNOWN_VALUES = [
    (56, "000000000000000000000000000000000000000000000000009D18B63AC4FFDF"),
    (57, "00000000000000000000000000000000000000000000000001EB25C90795D61C"),
    (58, "00000000000000000000000000000000000000000000000002C675B852189A21"),
    (59, "00000000000000000000000000000000000000000000000007496CBB87CAB44F"),
    (60, "0000000000000000000000000000000000000000000000000FC07A1825367BBE"),
    (61, "00000000000000000000000000000000000000000000000013C96A3742F64906"),
    (62, "000000000000000000000000000000000000000000000000363D541EB611ABEE"),
    (63, "0000000000000000000000000000000000000000000000007CCE5EFDACCF6808"),
    (64, "000000000000000000000000000000000000000000000000F7051F27B09112D4"),
    (65, "000000000000000000000000000000000000000000000001A838B13505B26867"),
    (66, "000000000000000000000000000000000000000000000002832ED74F2B5E35EE")
]

print("Comparing calculated values with actual values:")
print("=" * 70)

for puzzle_num, known_hex in KNOWN_VALUES:
    calculated = calculate_value(puzzle_num)
    known_value = int(known_hex, 16)
    
    print(f"\nPuzzle {puzzle_num}:")
    print(f"Known:      0x{known_value:x}")
    print(f"Calculated: 0x{calculated:x}")
    print(f"Difference: {abs(calculated - known_value)}")
    diff_percent = (abs(calculated - known_value) / known_value) * 100
    print(f"Difference %: {diff_percent:.8f}%")

print("\nCalculating puzzle 67:")
print("=" * 70)
p67_value = calculate_value(67)
print(f"Predicted value: 0x{p67_value:x}")

# Show a range of values around the prediction
print("\nPossible values around prediction:")
for offset in range(-5, 6):
    test_value = p67_value + offset
    print(f"Offset {offset:2d}: 0x{test_value:x}")

